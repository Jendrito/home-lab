1. Luego de realizar la fase 1 "Creacion Syslog en Kali", pasaremos a configurar la máquina virtual de Windows 10 para que envíe sus logs al servidor rsyslog en Kali Linux. Para esto, como Windows no posee un Syslog nativo, instalaremos un software para que haga este trabajo y para eso usaremos NXLog Community Edition, que es open source y gratuito. La pregunta que me surgió cuando sabía que tenía que descargar éste programa fue "pero si la VM de Windows no tiene internet actualmente, como lo puedo hacer?". Entonces, surgen dos soluciones: la primera y más sencilla es apagar la máquina virtual de Windows, en la sección "Red" de la configuración de la máquina virtual cambiar el Adaptador 1 a "NAT" y esto nos proveerá de internet sin inconveniente. Una vez descargado el programa, apagamos la máquina virtual, volvemos a "Red" y cambiamos nuevamente el Adaptador 1 a su estado anterior y volveríamos a tener nuestra VM de Windows aislada. Pero me pareció más interesante usar la segunda opción, que es más desafiante y nos permitirá aprender nuevos conceptos.

2. Para esta segunda opción, lo primero que haremos será acceder al siguiente link (https://nxlog.co/downloads/nxlog-ce#nxlog-community-edition) desde nuestra VM de Kali Linux y elegiremos la opción de descarga para Windows. Pedirá que nos logueemos, pero podemos negarnos y comenzar la descarga. El archivo .msi se descargará en nuestra carpeta "Downloads" de Kali Linux y desde esa carpeta abriremos una terminal. Ya con la terminal abierta, escrimos el comando python3 -m http.server 8080, lo que iniciará una sesión HTTP en el puerto 8080. Ahora vamos a nuestra VM de Windows, abrimos una terminal y escribimos el comando curl http://[IP-de-Kali]:8080/nxlog-ce-3.2.2329.msi -o nxlog.msi. En "IP-de-Kali" sustituimos por nuestra IP (en mí caso 192.168.50.20). Si el comando funciona bien, deberíamos poder ver lo que se muestra en las fotos 4 y 5, y nuestro archivo .msi estará descargado en el directorio que figura en nuestra terminal (en mí caso C:\Users\Esteban). Por el momento, ya podemos terminar la conexión HTTP desde Kali (Ctrl+C en la terminal) y seguir con la instalación en Windows.

3. Comenzamos la instalación (es sumamente sencilla, solo hay que ir avanzando) y NXLog se instalará como un servicio de Windows (podemos comprobar su instalación si, en el buscador de Windows escribimos "Servicios" y una vez dentro buscamos "nxlog"). Para proceder a su configuración, vamos al directorio de NXLog (en mí caso C:\Program Files\nxlog\conf) y encontraremos al archivo "nxlog.conf". Cuando lo ejecutemos, lo abrimos como un archivo .txt con el Bloc de notas (si no nos aparece esa opción, seleccionamos "Mas aplicaciones" y aparecerá) y dejamos desmarcada la opción "Usar siempre esta aplicación...". Una vez abierto el archivo, debemos modificar desde la linea que dice "#Collecting event log". Debemos quitar todos los # para descomentar las lineas que necesitamos queden activas (mirar foto 9) y además, donde dice "Host", debemos poner la IP de nuestra VM Kali (en mí caso 192.168.50.20) y procedemos a guardar. Aclaración: si al intentar guardar nos indica que no podemos modificar el archivo por falta de permisos, lo cerramos, damos click derecho sobre el archivo, "Propiedades", "Seguridad", marcamos "Usuarios" y, lo más probable, será que el grupo Usuarios solo tenga marcado en "Permisos de Usuarios" lectura y escritura. Para modificar eso, vamos a "Editar" y marcamos "Control total" en "Permitir". Aplicamos, aceptamos y, si ahora modificamos el .conf y lo guardamos, no debería haber inconveniente.

4. A continuación, ejecutamos nuevamente una terminal en Windows (como Administrador) para reiniciar el servicio NXLog. Para esto escribimos el comando net stop nxlog y luego net start nxlog. Para saber si configuramos correctamente el .conf en el punto anterior, podemos volver al directorio de NXLog (en mi caso C:\Program Files\nxlog\), entramos en la carpeta "data" y veremos un archivo llamado "nxlog.log". Entramos y, si sólo vemos "WARNING" de que el servicio se paró y se reanudó, significa que todo está correcto. Si hay otro tipo de "WARNING", hay que revisar el .conf. Ahora, volvemos a nuestra VM Kali, verificamos que rsyslog está corriendo (en la terminal corremos sudo systemctl status rsyslog; si no está corriendo, sudo systemctl start rsyslog) y luego corremos el comando sudo tail -f /var/log/syslog para ver si nos llegan los logs de Windows. Veremos que nos llegan muchos más logs de Kali (debido a la configuración en la fase 1), por lo que para que nos aparezca un log de Windows, debemos realizar una acción en esta máquina virtual. En mí caso abrí el visor de eventos ("Visor de Eventos" en el buscador de Windows) y eventualmente apareció el log de la IP de Windows.

5. Ahora, una pregunta que quizás surja es "para qué mantener logs de Kali si la VM que nos interesa analizar es la de Windows?". En la primer fase, configuramos que nos lleguen logs de Kali para comprobar que rsyslog funcionaba perfectamente, pero si sólo nos interesa ver los logs de la VM vulnerable (en este caso, Windows), haremos el paso inverso que realizamos en la fase 1. En la interfaz web de pfSense, vamos a Status -> System Logs -> Settings, y en "Remote Logging Options", en la parte final donde dice "Remote Syslog Contents" desmarcamos "Everything" y guardamos sin tener marcada ninguna opción. Con esto evitamos que Kali mande sus logs a rsyslog, pero pfSense continuará permitiendo que los logs de Windows lleguen a rsyslog.

6. Ya comprobamos que estamos recibiendo los logs, pero todavía no los estamos guardando. Para eso, corremos sudo nano /etc/rsyslog.conf y se no abrirá el archivo .conf para modificar. Agregaremos lo siguiente al final del archivo:

# Guardar logs remotos en carpetas separadas
$PreserveFQDN off
$UseDNS off

$template WinLogs,"/var/log/remote/%FROMHOST%/%PROGRAMNAME%.log"
if ($fromhost-ip == '192.168.30.10') then ?WinLogs
& stop

Esto le indicará a rsyslog que guarde todos los logs que reciba de otros hosts en la ruta que le indicamos. Lo ideal es saber para qué sirve cada línea de este código:

- $PreserveFQDN off guardara la IP del host en vez de su nombre DNS completo
- $UseDNS off evita DNS inversas, mejora rendimiento y evita errores si no hay DNS
- $template WinLogs,"/var/log/remote/%FROMHOST%/%PROGRAMNAME%.log" está creando una plantilla donde se guardaran los logs
- if ($fromhost-ip == '192.168.30.10') then ?WinLogs especifica que, si el log viene de esa IP, lo guarde en la plantilla indicada anteriormente
- & stop detiene el procesamiento para evitar duplicados o interferencias con otras reglas

Para comprobar que se están guardando vamos a correr el comando ls /var/log/remote y nos debería aparecer la IP de nuestra VM Windows. Dentro de esa carpeta (en mi caso ls -l /var/log/remote/192.168.30.10) podremos ver todos los registros.